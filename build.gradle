buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.0'
    }

    
}

apply plugin: 'net.minecraftforge.gradle.forgedev.patcher'

configurations {
    shade
    compile.extendsFrom shade
}

group = 'space.Nicholasblackburn'
version = '1.0.0'

ext {
    minecraft_version = '1.16.5'
    mcp_version = '20210115.111550'
    mappings_channel = 'official'
    mappings_version = '1.16.5'
    spi_version = '3.2.0'
}

repositories {
    mavenCentral()

}

dependencies {
    shade 'net.minecraftforge:forgespi:3.0.+'
    shade 'org.ow2.asm:asm:9.0'
    shade 'org.ow2.asm:asm-commons:9.0'
    shade 'org.ow2.asm:asm-tree:9.0'
    shade 'org.ow2.asm:asm-util:9.0'
    shade 'org.ow2.asm:asm-analysis:9.0'
    compile 'cpw.mods:modlauncher:8.0.9'
    shade 'cpw.mods:grossjava9hacks:1.3.3'
    shade 'net.minecraftforge:accesstransformers:3.0.1'
    compile 'org.antlr:antlr4-runtime:4.9.1' //Dep of AccessTransformer
    shade 'net.minecraftforge:eventbus:4.0.+'
    shade 'net.minecraftforge:coremods:4.0.+'
    shade 'net.minecraftforge:unsafe:0.2.+'
    compile 'com.electronwill.night-config:core:3.6.3'
    compile 'com.electronwill.night-config:toml:3.6.3'
    compile 'org.jline:jline:3.12.+'
    compile 'org.apache.maven:maven-artifact:3.6.3'
    compile 'net.jodah:typetools:0.8.3'
    compile 'org.apache.logging.log4j:log4j-api:2.11.2'
    compile 'org.apache.logging.log4j:log4j-core:2.11.2'
    compile 'net.minecrell:terminalconsoleappender:1.2.0'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
    compile 'org.spongepowered:mixin:0.8.2'
    // This is org.openjdk.nashorn:nashorn-core:15.1.1 repackaged so it doesn't crash on JREs < 15.
    // See: https://github.com/LexManos/NashornLegacyPackager
    compile 'net.minecraftforge:nashorn-core-compat:15.1.1.1'
    compile 'com.google.guava:guava:21.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.lwjgl:lwjgl:3.2.2'
    compile 'org.lwjgl:lwjgl-glfw:3.2.2'
    compile 'org.lwjgl:lwjgl-opengl:3.2.2'
    
//    Use the shade to add the lib to the jar
//    or use implementation if you want to load the lib from the version.json
//    from a maven repo
//    shade 'package-here'
//    implementation 'package-here'
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.forgedev.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patches = file("$rootDir/patches/minecraft")
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
        
        sourceSets {
        main {
        resources {
            srcDirs "src/main/resources/assets"
            srcDirs "src/main/resources/data"
            }
    
                }
            }
        }
    }
}


task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.16"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}

task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}


// For each duplicate strategy we create a copy task.
['warn', 'include', 'exclude', 'fail'].each { strategy ->
    task "copyDuplicatesStrategy${strategy.capitalize()}"(type: Copy) {
        from 'src/resources'
     
        into "$buildDir/copy"

        // Only the value for this property differs for
        // each created task.
        duplicatesStrategy = strategy

        // Print the used duplicates strategy when 
        // the task starts.
        doFirst {
            println "Copying with duplicates strategy '${strategy}'."
        }

        // Print the contents of the copied file COPY.txt.
        doLast {
            println "Contents of COPY.txt:"
            println file("$buildDir/copy/COPY.txt").text
        }
    }
}
